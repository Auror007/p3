{"version":3,"sources":["./src/app/gps/gps.page.html","./src/app/gps/gps.module.ts","./src/app/gps/gps.page.scss","./src/app/gps/gps.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,sgBAAuc,2JAA2J,yBAAyB,IAAI,qBAAqB,8I;;;;;;;;;;;;;;;;;;;;;;ACA1nB;AACM;AACF;AACU;AAEV;AAER;AAErC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,iDAAO;KACnB;CACF,CAAC;AAWF,IAAa,aAAa,GAA1B,MAAa,aAAa;CAAG;AAAhB,aAAa;IATzB,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9B;QACD,YAAY,EAAE,CAAC,iDAAO,CAAC;KACxB,CAAC;GACW,aAAa,CAAG;AAAH;;;;;;;;;;;;;ACzB1B;AAAe,6GAA8C,+H;;;;;;;;;;;;;;;;;;;;ACAa;AACjB;AAGhB;AACE;AACiB;AAU5D,IAAa,OAAO,GAApB,MAAa,OAAO;IAclB,YACS,OAAsB,EACrB,GAAa,EACd,WAAwB,EACvB,OAAgB;QAHjB,YAAO,GAAP,OAAO,CAAe;QACrB,QAAG,GAAH,GAAG,CAAU;QACd,gBAAW,GAAX,WAAW,CAAa;QACvB,YAAO,GAAP,OAAO,CAAS;QAZ1B,oBAAe,GAAG,IAAI,CAAC;QAEvB,eAAU,GAAG,KAAK,CAAC;QACnB,iBAAY,GAAG,EAAE,CAAC;QAClB,mBAAc,GAAG,EAAE,CAAC;IAQS,CAAC;IAI5B,QAAQ;QAER,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YAC1B,6BAA6B;YAE5B,IAAI,UAAU,GAAG;gBACf,IAAI,EAAE,EAAE;gBACR,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO;gBACxC,cAAc,EAAE,KAAK;gBACrB,iBAAiB,EAAE,KAAK;gBACxB,iBAAiB,EAAE,KAAK;aACzB,CAAC;YACF,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;YAGtE,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;gBACjD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC/E,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC,CAAC;QAEF,CAAC,CAAC,CAAC;IACP,CAAC;IAED,eAAe;IAGf,CAAC;CA2DF;;YA9FmB,4DAAa;YAChB,uDAAQ;YACD,yEAAW;YACd,sDAAO;;AAdO;IAAhC,+DAAS,CAAC,KAAK,EAAC,EAAC,MAAM,EAAC,KAAK,EAAC,CAAC;oEAAQ,wDAAU;uCAAC;AAJxC,OAAO;IALnB,+DAAS,CAAC;QACT,QAAQ,EAAE,SAAS;QACnB,mMAA8B;;KAE/B,CAAC;2EAgBkB,4DAAa;QAChB,uDAAQ;QACD,yEAAW;QACd,sDAAO;GAlBf,OAAO,CA6GnB;AA7GmB","file":"gps-gps-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Home</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    \\n\\n \\n\\n  <ion-button (click)=startTracking() *ngIf=\\\"!isTracking\\\">\\n    <ion-icon name=\\\"locate\\\"></ion-icon>\\n    Start Tracking\\n  </ion-button>\\n\\n  <ion-button (click)=stopTracking() *ngIf=\\\"isTracking\\\">\\n    <ion-icon name=\\\"hand\\\"></ion-icon>\\n    Stop Tracking\\n  </ion-button>\\n  <div class=\\\"map\\\" #map  style=\\\" width: 100%;\\n  height: 300px\\\"></div>\\n\\n<ion-list>\\n  <ion-list-header>Previous Tracks</ion-list-header>\\n  <ion-item *ngFor=\\\"let route of previousTracks\\\">\\n    {{ route.finished | date }}, {{ route.path.length }} Waypoints\\n    <ion-button  (click)=\\\"showHistoryRoute(route.path)\\\">View Route</ion-button>\\n  </ion-item>\\n</ion-list>\\n\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { GpsPage } from './gps.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GpsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [GpsPage]\n})\nexport class GpsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2dwcy9ncHMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit,ViewChild, AfterViewInit} from '@angular/core';\nimport { NavController, Platform } from '@ionic/angular';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { Storage } from '@ionic/storage';\nimport { ElementRef } from '@angular/core';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\n\n\ndeclare var google;\n\n@Component({\n  selector: 'app-gps',\n  templateUrl: './gps.page.html',\n  styleUrls: ['./gps.page.scss'],\n})\nexport class GpsPage implements OnInit,AfterViewInit {\n\n \n \n  @ViewChild('map',{static:false}) mapEle:ElementRef; \n    map: any;\n  currentMapTrack = null;\n \n  isTracking = false;\n  trackedRoute = [];\n  previousTracks = [];\n \n  positionSubscription: Subscription;\n \n  constructor(\n    public navCtrl: NavController, \n    private plt: Platform, \n    public geolocation: Geolocation,\n    private storage: Storage) {}\n  \n    \n  \n    ngOnInit()\n  {\n    console.log(\"BYE\");\n    this.plt.ready().then(() => {\n     // this.loadHistoricRoutes();\n \n      let mapOptions = {\n        zoom: 13,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        mapTypeControl: false,\n        streetViewControl: false,\n        fullscreenControl: false,\n      };\n      this.map = new google.maps.Map(this.mapEle.nativeElement, mapOptions);\n      \n     \n      this.geolocation.getCurrentPosition().then((pos) => {\n        let latLng = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);\n        this.map.setCenter(latLng);\n        this.map.setZoom(15);\n      })\n    \n      });\n  }\n\n  ngAfterViewInit() {\n    \n   \n  }\n\n  \n  // startTracking()\n  //   {\n  //     this.isTracking = true;\n  //     this.trackedRoute = [];\n   \n  //     let watch = this.geolocation.watchPosition();\n  //     watch.subscribe((data) => {\n  //         setTimeout(() => {\n  //           this.trackedRoute.push({ lat: data.coords.latitude, lng: data.coords.longitude });\n  //           this.redrawPath(this.trackedRoute);\n  //         }, 0);\n  //       });\n   \n  //   }\n   \n  //   redrawPath(path) {\n  //     if (this.currentMapTrack) {\n  //       this.currentMapTrack.setMap(null);\n  //     }\n   \n  //     if (path.length > 1) {\n  //       this.currentMapTrack = new google.maps.Polyline({\n  //         path: path,\n  //         geodesic: true,\n  //         strokeColor: '#ff00ff',\n  //         strokeOpacity: 1.0,\n  //         strokeWeight: 3\n  //       });\n  //       this.currentMapTrack.setMap(this.map);\n  //     }\n  //   }\n\n  //   stopTracking() {\n  //     let newRoute = { finished: new Date().getTime(), path: this.trackedRoute };\n  //     this.previousTracks.push(newRoute);\n  //     this.storage.set('routes', this.previousTracks);\n     \n  //     this.isTracking = false;\n  //     this.positionSubscription.unsubscribe();\n  //     this.currentMapTrack.setMap(null);\n  //   }\n     \n  //   showHistoryRoute(route) {\n  //     this.redrawPath(route);\n  //   }\n  \n  \n  //   loadHistoricRoutes() {\n  //     this.storage.get('routes').then(data => {\n  //       if (data) {\n  //         this.previousTracks = data;\n  //       }\n  //     });\n  //   } \n\n\n}\n"],"sourceRoot":"webpack:///"}